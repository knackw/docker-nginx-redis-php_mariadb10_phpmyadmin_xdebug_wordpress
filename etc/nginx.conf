user www;

# Set to number of CPU cores, auto will try to autodetect.
worker_processes auto;

# Maximum open file descriptors per process. Should be greater than worker_connections.
worker_rlimit_nofile 8192;

# File that stores the process ID. Rarely needs changing.
error_log /var/log/nginx/error.log warn;
pid /var/run/nginx.pid;

load_module "modules/ngx_http_perl_module.so";

env WORDPRESS_DOMAIN;
env WORDPRESS_PORT;
env WORDPRESS_PORT_SSL;

events {
	# Set the maximum number of connection each worker process can open. Anything higher than this
	# will require Unix optimisations.
	worker_connections 1024;

	# Accept all new connections as they're opened.
	multi_accept on;
}

http {

    # Speed up file transfer by using sendfile().
    sendfile on;

    # Don't send partial frames, which increases throughput.
    tcp_nopush on;

    # Don't wait to send data in keep-alive state.
    tcp_nodelay on;

    include                     /etc/nginx/mime.types;
    default_type                application/octet-stream;
    access_log                  /var/log/nginx/access.log;
    keepalive_timeout           3000;
    fastcgi_cache_path          /var/run/NGINX-cache levels=1:2 keys_zone=WORDPRESS:100m inactive=60m;
    fastcgi_cache_key           "$scheme$request_method$host$request_uri";

    # Enable Gzip compression.
    gzip on;

    # Disable Gzip on IE6.
    gzip_disable "msie6";

    # Allow proxies to cache both compressed and regular version of file.
    # Avoids clients that don't support Gzip outputting gibberish.
    gzip_vary on;

    # Compress data, even when the client connects through a proxy.
    gzip_proxied any;

    # The level of compression to apply to files. A higher compression level increases
    # CPU usage. Level 5 is a happy medium resulting in roughly 75% compression.
    gzip_comp_level 5;

    # The minimum HTTP version of a request to perform compression.
    gzip_http_version 1.1;

    # Don't compress files smaller than 256 bytes, as size reduction will be negligible.
    gzip_min_length 256;

    # Compress the following MIME types.
    gzip_types
        application/atom+xml
        application/javascript
        application/json
        application/ld+json
        application/manifest+json
        application/rss+xml
        application/vnd.geo+json
        application/vnd.ms-fontobject
        application/x-font-ttf
        application/x-web-app-manifest+json
        application/xhtml+xml
        application/xml
        font/opentype
        image/bmp
        image/svg+xml
        image/x-icon
        text/cache-manifest
        text/css
        text/plain
        text/vcard
        text/vnd.rim.location.xloc
        text/vtt
        text/x-component
        text/x-cross-domain-policy;
      # text/html is always compressed when enabled.

      perl_set $WORDPRESS_DOMAIN 'sub { return $ENV{"WORDPRESS_DOMAIN"}; }';
      perl_set $WORDPRESS_PORT 'sub { return $ENV{"WORDPRESS_PORT"}; }';
      perl_set $WORDPRESS_PORT_SSL 'sub { return $ENV{"WORDPRESS_PORT_SSL"}; }';

    # Redirect http requests to https
    server {
        listen      ${WORDPRESS_PORT};
        listen [::]:${WORDPRESS_PORT};
        server_name ${WORDPRESS_DOMAIN};
        return 301 https://$host$request_uri;
    }

    server {
        listen      ${WORDPRESS_PORT_SSL}           ssl http2;
        listen [::]:${WORDPRESS_PORT_SSL}           ssl http2;
        root                    /www;
        index                   index.php;
        server_name             ${WORDPRESS_DOMAIN};
    	client_max_body_size	64m;
        error_page              500 502 503 504  /50x.html;

        ssl_certificate           /certs/${WORDPRESS_DOMAIN}.crt;
        ssl_certificate_key       /certs/${WORDPRESS_DOMAIN}.key;
        ssl_session_cache         shared:SSL:20m;
        ssl_session_timeout       10m;

        ssl_protocols             TLSv1 TLSv1.1 TLSv1.2;
        ssl_prefer_server_ciphers on;
        ssl_ciphers               "ECDH+AESGCM:ECDH+AES256:ECDH+AES128:!ADH:!AECDH:!MD5;";

        # File to be used as index
        index index.php;

        # Deny all attempts to access hidden files such as .htaccess, .htpasswd, .DS_Store (Mac).
        # Keep logging the requests to parse later (or to pass to firewall utilities such as fail2ban)
        location ~* /\.(?!well-known\/) {
            deny all;
        }

        # Prevent access to certain file extensions
        location ~\.(ini|log|conf)$ {
            deny all;
        }

        # Deny access to any files with a .php extension in the uploads directory
        # Works in sub-directory installs and also in multisite network
        # Keep logging the requests to parse later (or to pass to firewall utilities such as fail2ban)
        location ~* /(?:uploads|files)/.*\.php$ {
            deny all;
        }

        # Generic security enhancements. Use https://securityheaders.io to test
        # and recommend further improvements.

        # Don't allow pages to be rendered in an iframe on external domains.
        add_header X-Frame-Options "SAMEORIGIN" always;

        # MIME sniffing prevention
        add_header X-Content-Type-Options "nosniff" always;

        # Enable cross-site scripting filter in supported browsers.
        add_header X-Xss-Protection "1; mode=block" always;

        # Whitelist sources which are allowed to load assets (JS, CSS, etc). The following will block
        # only none HTTPS assets, but check out https://scotthelme.co.uk/content-security-policy-an-introduction/
        # for an in-depth guide on creating a more restrictive policy.
        # add_header Content-Security-Policy "default-src 'self' https: data: 'unsafe-inline' 'unsafe-eval';" always;

        # Don't cache appcache, document html and data.
        location ~* \.(?:manifest|appcache|html?|xml|json)$ {
            expires 0;
        }

        # Cache RSS and Atom feeds.
        location ~* \.(?:rss|atom)$ {
            expires 1h;
        }

        # Caches images, icons, video, audio, HTC, etc.
        location ~* \.(?:jpg|jpeg|gif|png|ico|cur|gz|svg|mp4|ogg|ogv|webm|htc)$ {
            expires 1y;
            access_log off;
        }

        # Cache svgz files, but don't compress them.
        location ~* \.svgz$ {
            expires 1y;
            access_log off;
            gzip off;
        }

        # Cache CSS and JavaScript.
        location ~* \.(?:css|js)$ {
            expires 1y;
            access_log off;
        }

        # Cache WebFonts.
        location ~* \.(?:ttf|ttc|otf|eot|woff|woff2)$ {
            expires 1y;
            access_log off;
            add_header Access-Control-Allow-Origin *;
        }

        # Don't record access/error logs for robots.txt.
        location = /robots.txt {
            try_files $uri $uri/ /index.php?$args;
            access_log off;
            log_not_found off;
        }

        # The key to use when saving cache files, which will run through the MD5 hashing algorithm.
        fastcgi_cache_key "$scheme$request_method$host$request_uri";

        # If an error occurs when communicating with FastCGI server, return cached content.
        # Useful for serving cached content if the PHP process dies or timeouts.
        fastcgi_cache_use_stale error timeout updating invalid_header http_500;

        # Allow caching of requests which contain the following headers.
        fastcgi_ignore_headers Cache-Control Expires Set-Cookie;

        # Show the cache status in server responses.
        add_header Fastcgi-Cache $upstream_cache_status;

        # Don't skip by default
        set $skip_cache 0;

        # POST requests and urls with a query string should always go to PHP
        if ($request_method = POST) {
            set $skip_cache 1;
        }

        if ($query_string != "") {
            set $skip_cache 1;
        }

        # Don't cache URIs containing the following segments
        if ($request_uri ~* "/wp-admin/|/wp-json/|/xmlrpc.php|wp-.*.php|/feed/|index.php|sitemap(_index)?.xml|/cart/|/checkout/|/my-account/") {
            set $skip_cache 1;
        }

        # Don't use the cache for logged in users or recent commenters
        if ($http_cookie ~* "comment_author|wordpress_[a-f0-9]+|wp-postpass|wordpress_no_cache|wordpress_logged_in|edd_items_in_cart|woocommerce_items_in_cart") {
            set $skip_cache 1;
        }

        # Generic security enhancements. Use https://securityheaders.io to test
        # and recommend further improvements.

        # Hide Nginx version in error messages and reponse headers.
        server_tokens off;

        # Don't allow pages to be rendered in an iframe on external domains.
        add_header X-Frame-Options "SAMEORIGIN" always;

        # MIME sniffing prevention
        add_header X-Content-Type-Options "nosniff" always;

        # Enable cross-site scripting filter in supported browsers.
        add_header X-Xss-Protection "1; mode=block" always;

        # Whitelist sources which are allowed to load assets (JS, CSS, etc). The following will block
        # only none HTTPS assets, but check out https://scotthelme.co.uk/content-security-policy-an-introduction/
        # for an in-depth guide on creating a more restrictive policy.
        # add_header Content-Security-Policy "default-src 'self' https: data: 'unsafe-inline' 'unsafe-eval';" always;

        # WebP rules
        # --------------------
        location ~* ^/?wp-content/.*\.(png|jpe?g)$ {
            add_header Vary Accept;
            expires 365d;
        }

        # START Nginx Rewrites for Rank Math Sitemaps
        rewrite ^/sitemap_index.xml$ /index.php?sitemap=1 last;
        rewrite ^/([^/]+?)-sitemap([0-9]+)?.xml$ /index.php?sitemap=$1&sitemap_n=$2 last;
        # END Nginx Rewrites for Rank Math Sitemaps

        # Media: images, icons, video, audio send expires headers.
        location ~* \.(?:gif|ico|cur|gz|svg|svgz|mp4|ogg|ogv|webm|webp|jpg|jpeg|png)$ {
          expires 1M;
          access_log off;
          add_header Cache-Control "public";
        }

        # CSS and Javascript send expires headers.
        location ~* \.(?:css|js)$ {
          expires 1y;
          access_log off;
          add_header Cache-Control "public";
        }

        # HTML send expires headers.
        location ~* \.(html)$ {
          expires 7d;
          access_log off;
          add_header Cache-Control "public";
        }

        # Browser caching of static assets.
        location ~* \.(jpg|jpeg|png|webp|gif|ico|css|js|pdf)$ {
          expires 7d;
          add_header Cache-Control "public, no-transform";
        }

        location / {
            try_files $uri $uri/ /index.php?$args;
        }

        location ~ \.php$ {
            # Use the php pool defined in the upstream variable.
            # See global/php-pool.conf for definition.
            fastcgi_pass   127.0.0.1:9000;
            fastcgi_param  SCRIPT_FILENAME $document_root$fastcgi_script_name;
            include fastcgi_params;
            fastcgi_intercept_errors off;

            # PHP only, required if PHP was built with --enable-force-cgi-redirect
            fastcgi_param  REDIRECT_STATUS    200;

            # Skip cache based on rules in global/server/fastcgi-cache.conf.
            fastcgi_cache_bypass $skip_cache;
            fastcgi_no_cache $skip_cache;

            # Define memory zone for caching. Should match key_zone in fastcgi_cache_path above.
            fastcgi_cache WORDPRESS;

            # Define caching time.
            fastcgi_cache_valid 60m;
        }
    }

}